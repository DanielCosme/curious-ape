// Code generated by BobGen sqlite v0.25.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// FitnessLog is an object representing the database table.
type FitnessLog struct {
	ID        int32            `db:"id,pk" `
	DayID     int32            `db:"day_id" `
	Date      time.Time        `db:"date" `
	StartTime time.Time        `db:"start_time" `
	EndTime   time.Time        `db:"end_time" `
	Type      string           `db:"type" `
	Title     string           `db:"title" `
	Origin    string           `db:"origin" `
	Note      null.Val[string] `db:"note" `
	Raw       null.Val[string] `db:"raw" `

	R fitnessLogR `db:"-" `
}

// FitnessLogSlice is an alias for a slice of pointers to FitnessLog.
// This should almost always be used instead of []*FitnessLog.
type FitnessLogSlice []*FitnessLog

// FitnessLogs contains methods to work with the fitness_logs table
var FitnessLogs = sqlite.NewTablex[*FitnessLog, FitnessLogSlice, *FitnessLogSetter]("", "fitness_logs")

// FitnessLogsQuery is a query on the fitness_logs table
type FitnessLogsQuery = *sqlite.ViewQuery[*FitnessLog, FitnessLogSlice]

// FitnessLogsStmt is a prepared statment on fitness_logs
type FitnessLogsStmt = bob.QueryStmt[*FitnessLog, FitnessLogSlice]

// fitnessLogR is where relationships are stored.
type fitnessLogR struct {
	Day *Day // fk_fitness_logs_0
}

// FitnessLogSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type FitnessLogSetter struct {
	ID        omit.Val[int32]      `db:"id,pk"`
	DayID     omit.Val[int32]      `db:"day_id"`
	Date      omit.Val[time.Time]  `db:"date"`
	StartTime omit.Val[time.Time]  `db:"start_time"`
	EndTime   omit.Val[time.Time]  `db:"end_time"`
	Type      omit.Val[string]     `db:"type"`
	Title     omit.Val[string]     `db:"title"`
	Origin    omit.Val[string]     `db:"origin"`
	Note      omitnull.Val[string] `db:"note"`
	Raw       omitnull.Val[string] `db:"raw"`
}

func (s FitnessLogSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.DayID.IsUnset() {
		vals = append(vals, "day_id")
	}

	if !s.Date.IsUnset() {
		vals = append(vals, "date")
	}

	if !s.StartTime.IsUnset() {
		vals = append(vals, "start_time")
	}

	if !s.EndTime.IsUnset() {
		vals = append(vals, "end_time")
	}

	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}

	if !s.Title.IsUnset() {
		vals = append(vals, "title")
	}

	if !s.Origin.IsUnset() {
		vals = append(vals, "origin")
	}

	if !s.Note.IsUnset() {
		vals = append(vals, "note")
	}

	if !s.Raw.IsUnset() {
		vals = append(vals, "raw")
	}

	return vals
}

func (s FitnessLogSetter) Overwrite(t *FitnessLog) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.DayID.IsUnset() {
		t.DayID, _ = s.DayID.Get()
	}
	if !s.Date.IsUnset() {
		t.Date, _ = s.Date.Get()
	}
	if !s.StartTime.IsUnset() {
		t.StartTime, _ = s.StartTime.Get()
	}
	if !s.EndTime.IsUnset() {
		t.EndTime, _ = s.EndTime.Get()
	}
	if !s.Type.IsUnset() {
		t.Type, _ = s.Type.Get()
	}
	if !s.Title.IsUnset() {
		t.Title, _ = s.Title.Get()
	}
	if !s.Origin.IsUnset() {
		t.Origin, _ = s.Origin.Get()
	}
	if !s.Note.IsUnset() {
		t.Note, _ = s.Note.GetNull()
	}
	if !s.Raw.IsUnset() {
		t.Raw, _ = s.Raw.GetNull()
	}
}

func (s FitnessLogSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 10)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.DayID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.DayID))
	}

	if !s.Date.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Date))
	}

	if !s.StartTime.IsUnset() {
		vals = append(vals, sqlite.Arg(s.StartTime))
	}

	if !s.EndTime.IsUnset() {
		vals = append(vals, sqlite.Arg(s.EndTime))
	}

	if !s.Type.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Type))
	}

	if !s.Title.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Title))
	}

	if !s.Origin.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Origin))
	}

	if !s.Note.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Note))
	}

	if !s.Raw.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Raw))
	}

	return im.Values(vals...)
}

func (s FitnessLogSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s FitnessLogSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 10)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.DayID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "day_id")...),
			sqlite.Arg(s.DayID),
		}})
	}

	if !s.Date.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "date")...),
			sqlite.Arg(s.Date),
		}})
	}

	if !s.StartTime.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "start_time")...),
			sqlite.Arg(s.StartTime),
		}})
	}

	if !s.EndTime.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "end_time")...),
			sqlite.Arg(s.EndTime),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "type")...),
			sqlite.Arg(s.Type),
		}})
	}

	if !s.Title.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "title")...),
			sqlite.Arg(s.Title),
		}})
	}

	if !s.Origin.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "origin")...),
			sqlite.Arg(s.Origin),
		}})
	}

	if !s.Note.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "note")...),
			sqlite.Arg(s.Note),
		}})
	}

	if !s.Raw.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "raw")...),
			sqlite.Arg(s.Raw),
		}})
	}

	return exprs
}

type fitnessLogColumnNames struct {
	ID        string
	DayID     string
	Date      string
	StartTime string
	EndTime   string
	Type      string
	Title     string
	Origin    string
	Note      string
	Raw       string
}

type fitnessLogRelationshipJoins[Q dialect.Joinable] struct {
	Day bob.Mod[Q]
}

func buildFitnessLogRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) fitnessLogRelationshipJoins[Q] {
	return fitnessLogRelationshipJoins[Q]{
		Day: fitnessLogsJoinDay[Q](ctx, typ),
	}
}

func fitnessLogsJoin[Q dialect.Joinable](ctx context.Context) joinSet[fitnessLogRelationshipJoins[Q]] {
	return joinSet[fitnessLogRelationshipJoins[Q]]{
		InnerJoin: buildFitnessLogRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  buildFitnessLogRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: buildFitnessLogRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var FitnessLogColumns = struct {
	ID        sqlite.Expression
	DayID     sqlite.Expression
	Date      sqlite.Expression
	StartTime sqlite.Expression
	EndTime   sqlite.Expression
	Type      sqlite.Expression
	Title     sqlite.Expression
	Origin    sqlite.Expression
	Note      sqlite.Expression
	Raw       sqlite.Expression
}{
	ID:        sqlite.Quote("fitness_logs", "id"),
	DayID:     sqlite.Quote("fitness_logs", "day_id"),
	Date:      sqlite.Quote("fitness_logs", "date"),
	StartTime: sqlite.Quote("fitness_logs", "start_time"),
	EndTime:   sqlite.Quote("fitness_logs", "end_time"),
	Type:      sqlite.Quote("fitness_logs", "type"),
	Title:     sqlite.Quote("fitness_logs", "title"),
	Origin:    sqlite.Quote("fitness_logs", "origin"),
	Note:      sqlite.Quote("fitness_logs", "note"),
	Raw:       sqlite.Quote("fitness_logs", "raw"),
}

type fitnessLogWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int32]
	DayID     sqlite.WhereMod[Q, int32]
	Date      sqlite.WhereMod[Q, time.Time]
	StartTime sqlite.WhereMod[Q, time.Time]
	EndTime   sqlite.WhereMod[Q, time.Time]
	Type      sqlite.WhereMod[Q, string]
	Title     sqlite.WhereMod[Q, string]
	Origin    sqlite.WhereMod[Q, string]
	Note      sqlite.WhereNullMod[Q, string]
	Raw       sqlite.WhereNullMod[Q, string]
}

func FitnessLogWhere[Q sqlite.Filterable]() fitnessLogWhere[Q] {
	return fitnessLogWhere[Q]{
		ID:        sqlite.Where[Q, int32](FitnessLogColumns.ID),
		DayID:     sqlite.Where[Q, int32](FitnessLogColumns.DayID),
		Date:      sqlite.Where[Q, time.Time](FitnessLogColumns.Date),
		StartTime: sqlite.Where[Q, time.Time](FitnessLogColumns.StartTime),
		EndTime:   sqlite.Where[Q, time.Time](FitnessLogColumns.EndTime),
		Type:      sqlite.Where[Q, string](FitnessLogColumns.Type),
		Title:     sqlite.Where[Q, string](FitnessLogColumns.Title),
		Origin:    sqlite.Where[Q, string](FitnessLogColumns.Origin),
		Note:      sqlite.WhereNull[Q, string](FitnessLogColumns.Note),
		Raw:       sqlite.WhereNull[Q, string](FitnessLogColumns.Raw),
	}
}

// FindFitnessLog retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindFitnessLog(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*FitnessLog, error) {
	if len(cols) == 0 {
		return FitnessLogs.Query(
			ctx, exec,
			SelectWhere.FitnessLogs.ID.EQ(IDPK),
		).One()
	}

	return FitnessLogs.Query(
		ctx, exec,
		SelectWhere.FitnessLogs.ID.EQ(IDPK),
		sm.Columns(FitnessLogs.Columns().Only(cols...)),
	).One()
}

// FitnessLogExists checks the presence of a single record by primary key
func FitnessLogExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return FitnessLogs.Query(
		ctx, exec,
		SelectWhere.FitnessLogs.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the FitnessLog
func (o *FitnessLog) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the FitnessLog
func (o *FitnessLog) Update(ctx context.Context, exec bob.Executor, s *FitnessLogSetter) error {
	return FitnessLogs.Update(ctx, exec, s, o)
}

// Delete deletes a single FitnessLog record with an executor
func (o *FitnessLog) Delete(ctx context.Context, exec bob.Executor) error {
	return FitnessLogs.Delete(ctx, exec, o)
}

// Reload refreshes the FitnessLog using the executor
func (o *FitnessLog) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := FitnessLogs.Query(
		ctx, exec,
		SelectWhere.FitnessLogs.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o FitnessLogSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals FitnessLogSetter) error {
	return FitnessLogs.Update(ctx, exec, &vals, o...)
}

func (o FitnessLogSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return FitnessLogs.Delete(ctx, exec, o...)
}

func (o FitnessLogSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.FitnessLogs.ID.In(IDPK...),
	)

	o2, err := FitnessLogs.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func fitnessLogsJoinDay[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Days.NameAs(ctx)).On(
			DayColumns.ID.EQ(FitnessLogColumns.DayID),
		),
	}
}

// Day starts a query for related objects on days
func (o *FitnessLog) Day(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) DaysQuery {
	return Days.Query(ctx, exec, append(mods,
		sm.Where(DayColumns.ID.EQ(sqlite.Arg(o.DayID))),
	)...)
}

func (os FitnessLogSlice) Day(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) DaysQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.DayID)
	}

	return Days.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(DayColumns.ID).In(PKArgs...)),
	)...)
}

func (o *FitnessLog) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Day":
		rel, ok := retrieved.(*Day)
		if !ok {
			return fmt.Errorf("fitnessLog cannot load %T as %q", retrieved, name)
		}

		o.R.Day = rel

		if rel != nil {
			rel.R.FitnessLogs = FitnessLogSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("fitnessLog has no relationship %q", name)
	}
}

func PreloadFitnessLogDay(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Day, DaySlice](orm.Relationship{
		Name: "Day",
		Sides: []orm.RelSide{
			{
				From: "fitness_logs",
				To:   TableNames.Days,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Days.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.FitnessLogs.DayID,
				},
				ToColumns: []string{
					ColumnNames.Days.ID,
				},
			},
		},
	}, Days.Columns().Names(), opts...)
}

func ThenLoadFitnessLogDay(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadFitnessLogDay(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load FitnessLogDay", retrieved)
		}

		err := loader.LoadFitnessLogDay(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadFitnessLogDay loads the fitnessLog's Day into the .R struct
func (o *FitnessLog) LoadFitnessLogDay(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Day = nil

	related, err := o.Day(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.FitnessLogs = FitnessLogSlice{o}

	o.R.Day = related
	return nil
}

// LoadFitnessLogDay loads the fitnessLog's Day into the .R struct
func (os FitnessLogSlice) LoadFitnessLogDay(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	days, err := os.Day(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range days {
			if o.DayID != rel.ID {
				continue
			}

			rel.R.FitnessLogs = append(rel.R.FitnessLogs, o)

			o.R.Day = rel
			break
		}
	}

	return nil
}

func attachFitnessLogDay0(ctx context.Context, exec bob.Executor, count int, fitnessLog0 *FitnessLog, day1 *Day) (*FitnessLog, error) {
	setter := &FitnessLogSetter{
		DayID: omit.From(day1.ID),
	}

	err := FitnessLogs.Update(ctx, exec, setter, fitnessLog0)
	if err != nil {
		return nil, fmt.Errorf("attachFitnessLogDay0: %w", err)
	}

	return fitnessLog0, nil
}

func (fitnessLog0 *FitnessLog) InsertDay(ctx context.Context, exec bob.Executor, related *DaySetter) error {
	day1, err := Days.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachFitnessLogDay0(ctx, exec, 1, fitnessLog0, day1)
	if err != nil {
		return err
	}

	fitnessLog0.R.Day = day1

	day1.R.FitnessLogs = append(day1.R.FitnessLogs, fitnessLog0)

	return nil
}

func (fitnessLog0 *FitnessLog) AttachDay(ctx context.Context, exec bob.Executor, day1 *Day) error {
	var err error

	_, err = attachFitnessLogDay0(ctx, exec, 1, fitnessLog0, day1)
	if err != nil {
		return err
	}

	fitnessLog0.R.Day = day1

	day1.R.FitnessLogs = append(day1.R.FitnessLogs, fitnessLog0)

	return nil
}
