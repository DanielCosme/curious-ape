// Code generated by BobGen sqlite v0.25.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
)

// HabitCategory is an object representing the database table.
type HabitCategory struct {
	ID          int32  `db:"id,pk" `
	Name        string `db:"name" `
	Type        string `db:"type" `
	Description string `db:"description" `

	R habitCategoryR `db:"-" `
}

// HabitCategorySlice is an alias for a slice of pointers to HabitCategory.
// This should almost always be used instead of []*HabitCategory.
type HabitCategorySlice []*HabitCategory

// HabitCategories contains methods to work with the habit_categories table
var HabitCategories = sqlite.NewTablex[*HabitCategory, HabitCategorySlice, *HabitCategorySetter]("", "habit_categories")

// HabitCategoriesQuery is a query on the habit_categories table
type HabitCategoriesQuery = *sqlite.ViewQuery[*HabitCategory, HabitCategorySlice]

// HabitCategoriesStmt is a prepared statment on habit_categories
type HabitCategoriesStmt = bob.QueryStmt[*HabitCategory, HabitCategorySlice]

// habitCategoryR is where relationships are stored.
type habitCategoryR struct {
	Habits HabitSlice // fk_habits_1
}

// HabitCategorySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HabitCategorySetter struct {
	ID          omit.Val[int32]  `db:"id,pk"`
	Name        omit.Val[string] `db:"name"`
	Type        omit.Val[string] `db:"type"`
	Description omit.Val[string] `db:"description"`
}

func (s HabitCategorySetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	return vals
}

func (s HabitCategorySetter) Overwrite(t *HabitCategory) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Type.IsUnset() {
		t.Type, _ = s.Type.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.Get()
	}
}

func (s HabitCategorySetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 4)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.Name.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Name))
	}

	if !s.Type.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Type))
	}

	if !s.Description.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Description))
	}

	return im.Values(vals...)
}

func (s HabitCategorySetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s HabitCategorySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "name")...),
			sqlite.Arg(s.Name),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "type")...),
			sqlite.Arg(s.Type),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "description")...),
			sqlite.Arg(s.Description),
		}})
	}

	return exprs
}

type habitCategoryColumnNames struct {
	ID          string
	Name        string
	Type        string
	Description string
}

type habitCategoryRelationshipJoins[Q dialect.Joinable] struct {
	Habits bob.Mod[Q]
}

func buildHabitCategoryRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) habitCategoryRelationshipJoins[Q] {
	return habitCategoryRelationshipJoins[Q]{
		Habits: habitCategoriesJoinHabits[Q](ctx, typ),
	}
}

func habitCategoriesJoin[Q dialect.Joinable](ctx context.Context) joinSet[habitCategoryRelationshipJoins[Q]] {
	return joinSet[habitCategoryRelationshipJoins[Q]]{
		InnerJoin: buildHabitCategoryRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  buildHabitCategoryRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: buildHabitCategoryRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var HabitCategoryColumns = struct {
	ID          sqlite.Expression
	Name        sqlite.Expression
	Type        sqlite.Expression
	Description sqlite.Expression
}{
	ID:          sqlite.Quote("habit_categories", "id"),
	Name:        sqlite.Quote("habit_categories", "name"),
	Type:        sqlite.Quote("habit_categories", "type"),
	Description: sqlite.Quote("habit_categories", "description"),
}

type habitCategoryWhere[Q sqlite.Filterable] struct {
	ID          sqlite.WhereMod[Q, int32]
	Name        sqlite.WhereMod[Q, string]
	Type        sqlite.WhereMod[Q, string]
	Description sqlite.WhereMod[Q, string]
}

func HabitCategoryWhere[Q sqlite.Filterable]() habitCategoryWhere[Q] {
	return habitCategoryWhere[Q]{
		ID:          sqlite.Where[Q, int32](HabitCategoryColumns.ID),
		Name:        sqlite.Where[Q, string](HabitCategoryColumns.Name),
		Type:        sqlite.Where[Q, string](HabitCategoryColumns.Type),
		Description: sqlite.Where[Q, string](HabitCategoryColumns.Description),
	}
}

// FindHabitCategory retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHabitCategory(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*HabitCategory, error) {
	if len(cols) == 0 {
		return HabitCategories.Query(
			ctx, exec,
			SelectWhere.HabitCategories.ID.EQ(IDPK),
		).One()
	}

	return HabitCategories.Query(
		ctx, exec,
		SelectWhere.HabitCategories.ID.EQ(IDPK),
		sm.Columns(HabitCategories.Columns().Only(cols...)),
	).One()
}

// HabitCategoryExists checks the presence of a single record by primary key
func HabitCategoryExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return HabitCategories.Query(
		ctx, exec,
		SelectWhere.HabitCategories.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the HabitCategory
func (o *HabitCategory) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the HabitCategory
func (o *HabitCategory) Update(ctx context.Context, exec bob.Executor, s *HabitCategorySetter) error {
	return HabitCategories.Update(ctx, exec, s, o)
}

// Delete deletes a single HabitCategory record with an executor
func (o *HabitCategory) Delete(ctx context.Context, exec bob.Executor) error {
	return HabitCategories.Delete(ctx, exec, o)
}

// Reload refreshes the HabitCategory using the executor
func (o *HabitCategory) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HabitCategories.Query(
		ctx, exec,
		SelectWhere.HabitCategories.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o HabitCategorySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HabitCategorySetter) error {
	return HabitCategories.Update(ctx, exec, &vals, o...)
}

func (o HabitCategorySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return HabitCategories.Delete(ctx, exec, o...)
}

func (o HabitCategorySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.HabitCategories.ID.In(IDPK...),
	)

	o2, err := HabitCategories.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func habitCategoriesJoinHabits[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Habits.NameAs(ctx)).On(
			HabitColumns.HabitCategoryID.EQ(HabitCategoryColumns.ID),
		),
	}
}

// Habits starts a query for related objects on habits
func (o *HabitCategory) Habits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) HabitsQuery {
	return Habits.Query(ctx, exec, append(mods,
		sm.Where(HabitColumns.HabitCategoryID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os HabitCategorySlice) Habits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) HabitsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.ID)
	}

	return Habits.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(HabitColumns.HabitCategoryID).In(PKArgs...)),
	)...)
}

func (o *HabitCategory) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Habits":
		rels, ok := retrieved.(HabitSlice)
		if !ok {
			return fmt.Errorf("habitCategory cannot load %T as %q", retrieved, name)
		}

		o.R.Habits = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.HabitCategory = o
			}
		}
		return nil
	default:
		return fmt.Errorf("habitCategory has no relationship %q", name)
	}
}

func ThenLoadHabitCategoryHabits(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadHabitCategoryHabits(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load HabitCategoryHabits", retrieved)
		}

		err := loader.LoadHabitCategoryHabits(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadHabitCategoryHabits loads the habitCategory's Habits into the .R struct
func (o *HabitCategory) LoadHabitCategoryHabits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Habits = nil

	related, err := o.Habits(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.HabitCategory = o
	}

	o.R.Habits = related
	return nil
}

// LoadHabitCategoryHabits loads the habitCategory's Habits into the .R struct
func (os HabitCategorySlice) LoadHabitCategoryHabits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	habits, err := os.Habits(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Habits = nil
	}

	for _, o := range os {
		for _, rel := range habits {
			if o.ID != rel.HabitCategoryID {
				continue
			}

			rel.R.HabitCategory = o

			o.R.Habits = append(o.R.Habits, rel)
		}
	}

	return nil
}

func insertHabitCategoryHabits0(ctx context.Context, exec bob.Executor, habits1 []*HabitSetter, habitCategory0 *HabitCategory) (HabitSlice, error) {
	for i := range habits1 {
		habits1[i].HabitCategoryID = omit.From(habitCategory0.ID)
	}

	ret, err := Habits.InsertMany(ctx, exec, habits1...)
	if err != nil {
		return ret, fmt.Errorf("insertHabitCategoryHabits0: %w", err)
	}

	return ret, nil
}

func attachHabitCategoryHabits0(ctx context.Context, exec bob.Executor, count int, habits1 HabitSlice, habitCategory0 *HabitCategory) (HabitSlice, error) {
	setter := &HabitSetter{
		HabitCategoryID: omit.From(habitCategory0.ID),
	}

	err := Habits.Update(ctx, exec, setter, habits1...)
	if err != nil {
		return nil, fmt.Errorf("attachHabitCategoryHabits0: %w", err)
	}

	return habits1, nil
}

func (habitCategory0 *HabitCategory) InsertHabits(ctx context.Context, exec bob.Executor, related ...*HabitSetter) error {
	if len(related) == 0 {
		return nil
	}

	habits1, err := insertHabitCategoryHabits0(ctx, exec, related, habitCategory0)
	if err != nil {
		return err
	}

	habitCategory0.R.Habits = append(habitCategory0.R.Habits, habits1...)

	for _, rel := range habits1 {
		rel.R.HabitCategory = habitCategory0
	}
	return nil
}

func (habitCategory0 *HabitCategory) AttachHabits(ctx context.Context, exec bob.Executor, related ...*Habit) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	habits1 := HabitSlice(related)

	_, err = attachHabitCategoryHabits0(ctx, exec, len(related), habits1, habitCategory0)
	if err != nil {
		return err
	}

	habitCategory0.R.Habits = append(habitCategory0.R.Habits, habits1...)

	for _, rel := range related {
		rel.R.HabitCategory = habitCategory0
	}

	return nil
}
