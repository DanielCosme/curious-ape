// Code generated by BobGen sqlite v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
)

// Auth is an object representing the database table.
type Auth struct {
	ID           int32               `db:"id,pk" `
	Provider     string              `db:"provider" `
	AccessToken  string              `db:"access_token" `
	RefreshToken null.Val[string]    `db:"refresh_token" `
	TokenType    null.Val[string]    `db:"token_type" `
	Expiration   null.Val[time.Time] `db:"expiration" `
}

// AuthSlice is an alias for a slice of pointers to Auth.
// This should almost always be used instead of []*Auth.
type AuthSlice []*Auth

// Auths contains methods to work with the auths table
var Auths = sqlite.NewTablex[*Auth, AuthSlice, *AuthSetter]("", "auths")

// AuthsQuery is a query on the auths table
type AuthsQuery = *sqlite.ViewQuery[*Auth, AuthSlice]

// AuthsStmt is a prepared statment on auths
type AuthsStmt = bob.QueryStmt[*Auth, AuthSlice]

// AuthSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AuthSetter struct {
	ID           omit.Val[int32]         `db:"id,pk" `
	Provider     omit.Val[string]        `db:"provider" `
	AccessToken  omit.Val[string]        `db:"access_token" `
	RefreshToken omitnull.Val[string]    `db:"refresh_token" `
	TokenType    omitnull.Val[string]    `db:"token_type" `
	Expiration   omitnull.Val[time.Time] `db:"expiration" `
}

func (s AuthSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Provider.IsUnset() {
		vals = append(vals, "provider")
	}

	if !s.AccessToken.IsUnset() {
		vals = append(vals, "access_token")
	}

	if !s.RefreshToken.IsUnset() {
		vals = append(vals, "refresh_token")
	}

	if !s.TokenType.IsUnset() {
		vals = append(vals, "token_type")
	}

	if !s.Expiration.IsUnset() {
		vals = append(vals, "expiration")
	}

	return vals
}

func (s AuthSetter) Overwrite(t *Auth) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Provider.IsUnset() {
		t.Provider, _ = s.Provider.Get()
	}
	if !s.AccessToken.IsUnset() {
		t.AccessToken, _ = s.AccessToken.Get()
	}
	if !s.RefreshToken.IsUnset() {
		t.RefreshToken, _ = s.RefreshToken.GetNull()
	}
	if !s.TokenType.IsUnset() {
		t.TokenType, _ = s.TokenType.GetNull()
	}
	if !s.Expiration.IsUnset() {
		t.Expiration, _ = s.Expiration.GetNull()
	}
}

func (s AuthSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.Provider.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Provider))
	}

	if !s.AccessToken.IsUnset() {
		vals = append(vals, sqlite.Arg(s.AccessToken))
	}

	if !s.RefreshToken.IsUnset() {
		vals = append(vals, sqlite.Arg(s.RefreshToken))
	}

	if !s.TokenType.IsUnset() {
		vals = append(vals, sqlite.Arg(s.TokenType))
	}

	if !s.Expiration.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Expiration))
	}

	return im.Values(vals...)
}

func (s AuthSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s AuthSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.Provider.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "provider")...),
			sqlite.Arg(s.Provider),
		}})
	}

	if !s.AccessToken.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "access_token")...),
			sqlite.Arg(s.AccessToken),
		}})
	}

	if !s.RefreshToken.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "refresh_token")...),
			sqlite.Arg(s.RefreshToken),
		}})
	}

	if !s.TokenType.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "token_type")...),
			sqlite.Arg(s.TokenType),
		}})
	}

	if !s.Expiration.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "expiration")...),
			sqlite.Arg(s.Expiration),
		}})
	}

	return exprs
}

type authColumnNames struct {
	ID           string
	Provider     string
	AccessToken  string
	RefreshToken string
	TokenType    string
	Expiration   string
}

var AuthColumns = buildAuthColumns("auths")

type authColumns struct {
	tableAlias   string
	ID           sqlite.Expression
	Provider     sqlite.Expression
	AccessToken  sqlite.Expression
	RefreshToken sqlite.Expression
	TokenType    sqlite.Expression
	Expiration   sqlite.Expression
}

func (c authColumns) Alias() string {
	return c.tableAlias
}

func (authColumns) AliasedAs(alias string) authColumns {
	return buildAuthColumns(alias)
}

func buildAuthColumns(alias string) authColumns {
	return authColumns{
		tableAlias:   alias,
		ID:           sqlite.Quote(alias, "id"),
		Provider:     sqlite.Quote(alias, "provider"),
		AccessToken:  sqlite.Quote(alias, "access_token"),
		RefreshToken: sqlite.Quote(alias, "refresh_token"),
		TokenType:    sqlite.Quote(alias, "token_type"),
		Expiration:   sqlite.Quote(alias, "expiration"),
	}
}

type authWhere[Q sqlite.Filterable] struct {
	ID           sqlite.WhereMod[Q, int32]
	Provider     sqlite.WhereMod[Q, string]
	AccessToken  sqlite.WhereMod[Q, string]
	RefreshToken sqlite.WhereNullMod[Q, string]
	TokenType    sqlite.WhereNullMod[Q, string]
	Expiration   sqlite.WhereNullMod[Q, time.Time]
}

func (authWhere[Q]) AliasedAs(alias string) authWhere[Q] {
	return buildAuthWhere[Q](buildAuthColumns(alias))
}

func buildAuthWhere[Q sqlite.Filterable](cols authColumns) authWhere[Q] {
	return authWhere[Q]{
		ID:           sqlite.Where[Q, int32](cols.ID),
		Provider:     sqlite.Where[Q, string](cols.Provider),
		AccessToken:  sqlite.Where[Q, string](cols.AccessToken),
		RefreshToken: sqlite.WhereNull[Q, string](cols.RefreshToken),
		TokenType:    sqlite.WhereNull[Q, string](cols.TokenType),
		Expiration:   sqlite.WhereNull[Q, time.Time](cols.Expiration),
	}
}

// FindAuth retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAuth(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Auth, error) {
	if len(cols) == 0 {
		return Auths.Query(
			ctx, exec,
			SelectWhere.Auths.ID.EQ(IDPK),
		).One()
	}

	return Auths.Query(
		ctx, exec,
		SelectWhere.Auths.ID.EQ(IDPK),
		sm.Columns(Auths.Columns().Only(cols...)),
	).One()
}

// AuthExists checks the presence of a single record by primary key
func AuthExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Auths.Query(
		ctx, exec,
		SelectWhere.Auths.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Auth
func (o *Auth) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the Auth
func (o *Auth) Update(ctx context.Context, exec bob.Executor, s *AuthSetter) error {
	return Auths.Update(ctx, exec, s, o)
}

// Delete deletes a single Auth record with an executor
func (o *Auth) Delete(ctx context.Context, exec bob.Executor) error {
	return Auths.Delete(ctx, exec, o)
}

// Reload refreshes the Auth using the executor
func (o *Auth) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Auths.Query(
		ctx, exec,
		SelectWhere.Auths.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o AuthSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AuthSetter) error {
	return Auths.Update(ctx, exec, &vals, o...)
}

func (o AuthSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Auths.Delete(ctx, exec, o...)
}

func (o AuthSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Auths.ID.In(IDPK...),
	)

	o2, err := Auths.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
