// Code generated by BobGen sqlite v0.30.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
)

// HabitCategory is an object representing the database table.
type HabitCategory struct {
	ID          int32  `db:"id,pk" `
	Name        string `db:"name" `
	Kind        string `db:"kind" `
	Description string `db:"description" `

	R habitCategoryR `db:"-" `
}

// HabitCategorySlice is an alias for a slice of pointers to HabitCategory.
// This should almost always be used instead of []*HabitCategory.
type HabitCategorySlice []*HabitCategory

// HabitCategories contains methods to work with the habit_categories table
var HabitCategories = sqlite.NewTablex[*HabitCategory, HabitCategorySlice, *HabitCategorySetter]("", "habit_categories")

// HabitCategoriesQuery is a query on the habit_categories table
type HabitCategoriesQuery = *sqlite.ViewQuery[*HabitCategory, HabitCategorySlice]

// habitCategoryR is where relationships are stored.
type habitCategoryR struct {
	Habits HabitSlice // fk_habits_1
}

type habitCategoryColumnNames struct {
	ID          string
	Name        string
	Kind        string
	Description string
}

var HabitCategoryColumns = buildHabitCategoryColumns("habit_categories")

type habitCategoryColumns struct {
	tableAlias  string
	ID          sqlite.Expression
	Name        sqlite.Expression
	Kind        sqlite.Expression
	Description sqlite.Expression
}

func (c habitCategoryColumns) Alias() string {
	return c.tableAlias
}

func (habitCategoryColumns) AliasedAs(alias string) habitCategoryColumns {
	return buildHabitCategoryColumns(alias)
}

func buildHabitCategoryColumns(alias string) habitCategoryColumns {
	return habitCategoryColumns{
		tableAlias:  alias,
		ID:          sqlite.Quote(alias, "id"),
		Name:        sqlite.Quote(alias, "name"),
		Kind:        sqlite.Quote(alias, "kind"),
		Description: sqlite.Quote(alias, "description"),
	}
}

type habitCategoryWhere[Q sqlite.Filterable] struct {
	ID          sqlite.WhereMod[Q, int32]
	Name        sqlite.WhereMod[Q, string]
	Kind        sqlite.WhereMod[Q, string]
	Description sqlite.WhereMod[Q, string]
}

func (habitCategoryWhere[Q]) AliasedAs(alias string) habitCategoryWhere[Q] {
	return buildHabitCategoryWhere[Q](buildHabitCategoryColumns(alias))
}

func buildHabitCategoryWhere[Q sqlite.Filterable](cols habitCategoryColumns) habitCategoryWhere[Q] {
	return habitCategoryWhere[Q]{
		ID:          sqlite.Where[Q, int32](cols.ID),
		Name:        sqlite.Where[Q, string](cols.Name),
		Kind:        sqlite.Where[Q, string](cols.Kind),
		Description: sqlite.Where[Q, string](cols.Description),
	}
}

var HabitCategoryErrors = &habitCategoryErrors{
	ErrUniqueKind: &UniqueConstraintError{s: "habit_categories.kind"},

	ErrUniqueName: &UniqueConstraintError{s: "habit_categories.name"},
}

type habitCategoryErrors struct {
	ErrUniqueKind *UniqueConstraintError

	ErrUniqueName *UniqueConstraintError
}

// HabitCategorySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HabitCategorySetter struct {
	ID          omit.Val[int32]  `db:"id,pk" `
	Name        omit.Val[string] `db:"name" `
	Kind        omit.Val[string] `db:"kind" `
	Description omit.Val[string] `db:"description" `
}

func (s HabitCategorySetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Kind.IsUnset() {
		vals = append(vals, "kind")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	return vals
}

func (s HabitCategorySetter) Overwrite(t *HabitCategory) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Kind.IsUnset() {
		t.Kind, _ = s.Kind.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.Get()
	}
}

func (s *HabitCategorySetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HabitCategories.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.Table.Columns) == 0 {
		q.Table.Columns = s.SetColumns()
	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 4)
		if !s.ID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.ID))
		}

		if !s.Name.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Name))
		}

		if !s.Kind.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Kind))
		}

		if !s.Description.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Description))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HabitCategorySetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HabitCategorySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "name")...),
			sqlite.Arg(s.Name),
		}})
	}

	if !s.Kind.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "kind")...),
			sqlite.Arg(s.Kind),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "description")...),
			sqlite.Arg(s.Description),
		}})
	}

	return exprs
}

// FindHabitCategory retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHabitCategory(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*HabitCategory, error) {
	if len(cols) == 0 {
		return HabitCategories.Query(
			SelectWhere.HabitCategories.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return HabitCategories.Query(
		SelectWhere.HabitCategories.ID.EQ(IDPK),
		sm.Columns(HabitCategories.Columns().Only(cols...)),
	).One(ctx, exec)
}

// HabitCategoryExists checks the presence of a single record by primary key
func HabitCategoryExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return HabitCategories.Query(
		SelectWhere.HabitCategories.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HabitCategory is retrieved from the database
func (o *HabitCategory) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HabitCategories.AfterSelectHooks.RunHooks(ctx, exec, HabitCategorySlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HabitCategories.AfterInsertHooks.RunHooks(ctx, exec, HabitCategorySlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HabitCategories.AfterUpdateHooks.RunHooks(ctx, exec, HabitCategorySlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HabitCategories.AfterDeleteHooks.RunHooks(ctx, exec, HabitCategorySlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the HabitCategory
func (o *HabitCategory) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *HabitCategory) pkEQ() dialect.Expression {
	return sqlite.Quote("habit_categories", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HabitCategory
func (o *HabitCategory) Update(ctx context.Context, exec bob.Executor, s *HabitCategorySetter) error {
	v, err := HabitCategories.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single HabitCategory record with an executor
func (o *HabitCategory) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HabitCategories.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HabitCategory using the executor
func (o *HabitCategory) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HabitCategories.Query(
		SelectWhere.HabitCategories.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after HabitCategorySlice is retrieved from the database
func (o HabitCategorySlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HabitCategories.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HabitCategories.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HabitCategories.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HabitCategories.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HabitCategorySlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("habit_categories", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HabitCategorySlice) copyMatchingRows(from ...*HabitCategory) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HabitCategorySlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HabitCategories.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HabitCategory:
				o.copyMatchingRows(retrieved)
			case []*HabitCategory:
				o.copyMatchingRows(retrieved...)
			case HabitCategorySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HabitCategory or a slice of HabitCategory
				// then run the AfterUpdateHooks on the slice
				_, err = HabitCategories.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HabitCategorySlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HabitCategories.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HabitCategory:
				o.copyMatchingRows(retrieved)
			case []*HabitCategory:
				o.copyMatchingRows(retrieved...)
			case HabitCategorySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HabitCategory or a slice of HabitCategory
				// then run the AfterDeleteHooks on the slice
				_, err = HabitCategories.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HabitCategorySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HabitCategorySetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HabitCategories.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HabitCategorySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HabitCategories.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HabitCategorySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HabitCategories.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type habitCategoryJoins[Q dialect.Joinable] struct {
	typ    string
	Habits func(context.Context) modAs[Q, habitColumns]
}

func (j habitCategoryJoins[Q]) aliasedAs(alias string) habitCategoryJoins[Q] {
	return buildHabitCategoryJoins[Q](buildHabitCategoryColumns(alias), j.typ)
}

func buildHabitCategoryJoins[Q dialect.Joinable](cols habitCategoryColumns, typ string) habitCategoryJoins[Q] {
	return habitCategoryJoins[Q]{
		typ:    typ,
		Habits: habitCategoriesJoinHabits[Q](cols, typ),
	}
}

func habitCategoriesJoinHabits[Q dialect.Joinable](from habitCategoryColumns, typ string) func(context.Context) modAs[Q, habitColumns] {
	return func(ctx context.Context) modAs[Q, habitColumns] {
		return modAs[Q, habitColumns]{
			c: HabitColumns,
			f: func(to habitColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Habits.Name().As(to.Alias())).On(
						to.HabitCategoryID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// Habits starts a query for related objects on habits
func (o *HabitCategory) Habits(mods ...bob.Mod[*dialect.SelectQuery]) HabitsQuery {
	return Habits.Query(append(mods,
		sm.Where(HabitColumns.HabitCategoryID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os HabitCategorySlice) Habits(mods ...bob.Mod[*dialect.SelectQuery]) HabitsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.ID)
	}

	return Habits.Query(append(mods,
		sm.Where(sqlite.Group(HabitColumns.HabitCategoryID).In(PKArgs...)),
	)...)
}

func (o *HabitCategory) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Habits":
		rels, ok := retrieved.(HabitSlice)
		if !ok {
			return fmt.Errorf("habitCategory cannot load %T as %q", retrieved, name)
		}

		o.R.Habits = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.HabitCategory = o
			}
		}
		return nil
	default:
		return fmt.Errorf("habitCategory has no relationship %q", name)
	}
}

func ThenLoadHabitCategoryHabits(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadHabitCategoryHabits(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load HabitCategoryHabits", retrieved)
		}

		err := loader.LoadHabitCategoryHabits(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadHabitCategoryHabits loads the habitCategory's Habits into the .R struct
func (o *HabitCategory) LoadHabitCategoryHabits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Habits = nil

	related, err := o.Habits(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.HabitCategory = o
	}

	o.R.Habits = related
	return nil
}

// LoadHabitCategoryHabits loads the habitCategory's Habits into the .R struct
func (os HabitCategorySlice) LoadHabitCategoryHabits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	habits, err := os.Habits(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Habits = nil
	}

	for _, o := range os {
		for _, rel := range habits {
			if o.ID != rel.HabitCategoryID {
				continue
			}

			rel.R.HabitCategory = o

			o.R.Habits = append(o.R.Habits, rel)
		}
	}

	return nil
}

func insertHabitCategoryHabits0(ctx context.Context, exec bob.Executor, habits1 []*HabitSetter, habitCategory0 *HabitCategory) (HabitSlice, error) {
	for i := range habits1 {
		habits1[i].HabitCategoryID = omit.From(habitCategory0.ID)
	}

	ret, err := Habits.Insert(bob.ToMods(habits1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertHabitCategoryHabits0: %w", err)
	}

	return ret, nil
}

func attachHabitCategoryHabits0(ctx context.Context, exec bob.Executor, count int, habits1 HabitSlice, habitCategory0 *HabitCategory) (HabitSlice, error) {
	setter := &HabitSetter{
		HabitCategoryID: omit.From(habitCategory0.ID),
	}

	err := habits1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachHabitCategoryHabits0: %w", err)
	}

	return habits1, nil
}

func (habitCategory0 *HabitCategory) InsertHabits(ctx context.Context, exec bob.Executor, related ...*HabitSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	habits1, err := insertHabitCategoryHabits0(ctx, exec, related, habitCategory0)
	if err != nil {
		return err
	}

	habitCategory0.R.Habits = append(habitCategory0.R.Habits, habits1...)

	for _, rel := range habits1 {
		rel.R.HabitCategory = habitCategory0
	}
	return nil
}

func (habitCategory0 *HabitCategory) AttachHabits(ctx context.Context, exec bob.Executor, related ...*Habit) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	habits1 := HabitSlice(related)

	_, err = attachHabitCategoryHabits0(ctx, exec, len(related), habits1, habitCategory0)
	if err != nil {
		return err
	}

	habitCategory0.R.Habits = append(habitCategory0.R.Habits, habits1...)

	for _, rel := range related {
		rel.R.HabitCategory = habitCategory0
	}

	return nil
}
