// Code generated by BobGen sqlite v0.30.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Habit is an object representing the database table.
type Habit struct {
	ID              int32          `db:"id,pk" `
	DayID           int32          `db:"day_id" `
	HabitCategoryID int32          `db:"habit_category_id" `
	State           string         `db:"state" `
	Automated       null.Val[bool] `db:"automated" `

	R habitR `db:"-" `
}

// HabitSlice is an alias for a slice of pointers to Habit.
// This should almost always be used instead of []*Habit.
type HabitSlice []*Habit

// Habits contains methods to work with the habits table
var Habits = sqlite.NewTablex[*Habit, HabitSlice, *HabitSetter]("", "habits")

// HabitsQuery is a query on the habits table
type HabitsQuery = *sqlite.ViewQuery[*Habit, HabitSlice]

// habitR is where relationships are stored.
type habitR struct {
	Day           *Day           // fk_habits_0
	HabitCategory *HabitCategory // fk_habits_1
}

type habitColumnNames struct {
	ID              string
	DayID           string
	HabitCategoryID string
	State           string
	Automated       string
}

var HabitColumns = buildHabitColumns("habits")

type habitColumns struct {
	tableAlias      string
	ID              sqlite.Expression
	DayID           sqlite.Expression
	HabitCategoryID sqlite.Expression
	State           sqlite.Expression
	Automated       sqlite.Expression
}

func (c habitColumns) Alias() string {
	return c.tableAlias
}

func (habitColumns) AliasedAs(alias string) habitColumns {
	return buildHabitColumns(alias)
}

func buildHabitColumns(alias string) habitColumns {
	return habitColumns{
		tableAlias:      alias,
		ID:              sqlite.Quote(alias, "id"),
		DayID:           sqlite.Quote(alias, "day_id"),
		HabitCategoryID: sqlite.Quote(alias, "habit_category_id"),
		State:           sqlite.Quote(alias, "state"),
		Automated:       sqlite.Quote(alias, "automated"),
	}
}

type habitWhere[Q sqlite.Filterable] struct {
	ID              sqlite.WhereMod[Q, int32]
	DayID           sqlite.WhereMod[Q, int32]
	HabitCategoryID sqlite.WhereMod[Q, int32]
	State           sqlite.WhereMod[Q, string]
	Automated       sqlite.WhereNullMod[Q, bool]
}

func (habitWhere[Q]) AliasedAs(alias string) habitWhere[Q] {
	return buildHabitWhere[Q](buildHabitColumns(alias))
}

func buildHabitWhere[Q sqlite.Filterable](cols habitColumns) habitWhere[Q] {
	return habitWhere[Q]{
		ID:              sqlite.Where[Q, int32](cols.ID),
		DayID:           sqlite.Where[Q, int32](cols.DayID),
		HabitCategoryID: sqlite.Where[Q, int32](cols.HabitCategoryID),
		State:           sqlite.Where[Q, string](cols.State),
		Automated:       sqlite.WhereNull[Q, bool](cols.Automated),
	}
}

var HabitErrors = &habitErrors{
	ErrUniqueDayIdAndHabitCategoryId: &UniqueConstraintError{s: "habits.day_id, habits.habit_category_id"},
}

type habitErrors struct {
	ErrUniqueDayIdAndHabitCategoryId *UniqueConstraintError
}

// HabitSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HabitSetter struct {
	ID              omit.Val[int32]    `db:"id,pk" `
	DayID           omit.Val[int32]    `db:"day_id" `
	HabitCategoryID omit.Val[int32]    `db:"habit_category_id" `
	State           omit.Val[string]   `db:"state" `
	Automated       omitnull.Val[bool] `db:"automated" `
}

func (s HabitSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.DayID.IsUnset() {
		vals = append(vals, "day_id")
	}

	if !s.HabitCategoryID.IsUnset() {
		vals = append(vals, "habit_category_id")
	}

	if !s.State.IsUnset() {
		vals = append(vals, "state")
	}

	if !s.Automated.IsUnset() {
		vals = append(vals, "automated")
	}

	return vals
}

func (s HabitSetter) Overwrite(t *Habit) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.DayID.IsUnset() {
		t.DayID, _ = s.DayID.Get()
	}
	if !s.HabitCategoryID.IsUnset() {
		t.HabitCategoryID, _ = s.HabitCategoryID.Get()
	}
	if !s.State.IsUnset() {
		t.State, _ = s.State.Get()
	}
	if !s.Automated.IsUnset() {
		t.Automated, _ = s.Automated.GetNull()
	}
}

func (s *HabitSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Habits.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.Table.Columns) == 0 {
		q.Table.Columns = s.SetColumns()
	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 5)
		if !s.ID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.ID))
		}

		if !s.DayID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.DayID))
		}

		if !s.HabitCategoryID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.HabitCategoryID))
		}

		if !s.State.IsUnset() {
			vals = append(vals, sqlite.Arg(s.State))
		}

		if !s.Automated.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Automated))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HabitSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HabitSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.DayID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "day_id")...),
			sqlite.Arg(s.DayID),
		}})
	}

	if !s.HabitCategoryID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "habit_category_id")...),
			sqlite.Arg(s.HabitCategoryID),
		}})
	}

	if !s.State.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "state")...),
			sqlite.Arg(s.State),
		}})
	}

	if !s.Automated.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "automated")...),
			sqlite.Arg(s.Automated),
		}})
	}

	return exprs
}

// FindHabit retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHabit(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Habit, error) {
	if len(cols) == 0 {
		return Habits.Query(
			SelectWhere.Habits.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Habits.Query(
		SelectWhere.Habits.ID.EQ(IDPK),
		sm.Columns(Habits.Columns().Only(cols...)),
	).One(ctx, exec)
}

// HabitExists checks the presence of a single record by primary key
func HabitExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Habits.Query(
		SelectWhere.Habits.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Habit is retrieved from the database
func (o *Habit) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Habits.AfterSelectHooks.RunHooks(ctx, exec, HabitSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Habits.AfterInsertHooks.RunHooks(ctx, exec, HabitSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Habits.AfterUpdateHooks.RunHooks(ctx, exec, HabitSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Habits.AfterDeleteHooks.RunHooks(ctx, exec, HabitSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Habit
func (o *Habit) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *Habit) pkEQ() dialect.Expression {
	return sqlite.Quote("habits", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Habit
func (o *Habit) Update(ctx context.Context, exec bob.Executor, s *HabitSetter) error {
	v, err := Habits.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Habit record with an executor
func (o *Habit) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Habits.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Habit using the executor
func (o *Habit) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Habits.Query(
		SelectWhere.Habits.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after HabitSlice is retrieved from the database
func (o HabitSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Habits.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Habits.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Habits.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Habits.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HabitSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("habits", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HabitSlice) copyMatchingRows(from ...*Habit) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HabitSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Habits.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Habit:
				o.copyMatchingRows(retrieved)
			case []*Habit:
				o.copyMatchingRows(retrieved...)
			case HabitSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Habit or a slice of Habit
				// then run the AfterUpdateHooks on the slice
				_, err = Habits.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HabitSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Habits.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Habit:
				o.copyMatchingRows(retrieved)
			case []*Habit:
				o.copyMatchingRows(retrieved...)
			case HabitSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Habit or a slice of Habit
				// then run the AfterDeleteHooks on the slice
				_, err = Habits.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HabitSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HabitSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Habits.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HabitSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Habits.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HabitSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Habits.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type habitJoins[Q dialect.Joinable] struct {
	typ           string
	Day           func(context.Context) modAs[Q, dayColumns]
	HabitCategory func(context.Context) modAs[Q, habitCategoryColumns]
}

func (j habitJoins[Q]) aliasedAs(alias string) habitJoins[Q] {
	return buildHabitJoins[Q](buildHabitColumns(alias), j.typ)
}

func buildHabitJoins[Q dialect.Joinable](cols habitColumns, typ string) habitJoins[Q] {
	return habitJoins[Q]{
		typ:           typ,
		Day:           habitsJoinDay[Q](cols, typ),
		HabitCategory: habitsJoinHabitCategory[Q](cols, typ),
	}
}

func habitsJoinDay[Q dialect.Joinable](from habitColumns, typ string) func(context.Context) modAs[Q, dayColumns] {
	return func(ctx context.Context) modAs[Q, dayColumns] {
		return modAs[Q, dayColumns]{
			c: DayColumns,
			f: func(to dayColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Days.Name().As(to.Alias())).On(
						to.ID.EQ(from.DayID),
					))
				}

				return mods
			},
		}
	}
}

func habitsJoinHabitCategory[Q dialect.Joinable](from habitColumns, typ string) func(context.Context) modAs[Q, habitCategoryColumns] {
	return func(ctx context.Context) modAs[Q, habitCategoryColumns] {
		return modAs[Q, habitCategoryColumns]{
			c: HabitCategoryColumns,
			f: func(to habitCategoryColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, HabitCategories.Name().As(to.Alias())).On(
						to.ID.EQ(from.HabitCategoryID),
					))
				}

				return mods
			},
		}
	}
}

// Day starts a query for related objects on days
func (o *Habit) Day(mods ...bob.Mod[*dialect.SelectQuery]) DaysQuery {
	return Days.Query(append(mods,
		sm.Where(DayColumns.ID.EQ(sqlite.Arg(o.DayID))),
	)...)
}

func (os HabitSlice) Day(mods ...bob.Mod[*dialect.SelectQuery]) DaysQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.DayID)
	}

	return Days.Query(append(mods,
		sm.Where(sqlite.Group(DayColumns.ID).In(PKArgs...)),
	)...)
}

// HabitCategory starts a query for related objects on habit_categories
func (o *Habit) HabitCategory(mods ...bob.Mod[*dialect.SelectQuery]) HabitCategoriesQuery {
	return HabitCategories.Query(append(mods,
		sm.Where(HabitCategoryColumns.ID.EQ(sqlite.Arg(o.HabitCategoryID))),
	)...)
}

func (os HabitSlice) HabitCategory(mods ...bob.Mod[*dialect.SelectQuery]) HabitCategoriesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.HabitCategoryID)
	}

	return HabitCategories.Query(append(mods,
		sm.Where(sqlite.Group(HabitCategoryColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Habit) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Day":
		rel, ok := retrieved.(*Day)
		if !ok {
			return fmt.Errorf("habit cannot load %T as %q", retrieved, name)
		}

		o.R.Day = rel

		if rel != nil {
			rel.R.Habits = HabitSlice{o}
		}
		return nil
	case "HabitCategory":
		rel, ok := retrieved.(*HabitCategory)
		if !ok {
			return fmt.Errorf("habit cannot load %T as %q", retrieved, name)
		}

		o.R.HabitCategory = rel

		if rel != nil {
			rel.R.Habits = HabitSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("habit has no relationship %q", name)
	}
}

func PreloadHabitDay(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Day, DaySlice](orm.Relationship{
		Name: "Day",
		Sides: []orm.RelSide{
			{
				From: TableNames.Habits,
				To:   TableNames.Days,
				FromColumns: []string{
					ColumnNames.Habits.DayID,
				},
				ToColumns: []string{
					ColumnNames.Days.ID,
				},
			},
		},
	}, Days.Columns().Names(), opts...)
}

func ThenLoadHabitDay(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadHabitDay(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load HabitDay", retrieved)
		}

		err := loader.LoadHabitDay(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadHabitDay loads the habit's Day into the .R struct
func (o *Habit) LoadHabitDay(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Day = nil

	related, err := o.Day(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Habits = HabitSlice{o}

	o.R.Day = related
	return nil
}

// LoadHabitDay loads the habit's Day into the .R struct
func (os HabitSlice) LoadHabitDay(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	days, err := os.Day(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range days {
			if o.DayID != rel.ID {
				continue
			}

			rel.R.Habits = append(rel.R.Habits, o)

			o.R.Day = rel
			break
		}
	}

	return nil
}

func PreloadHabitHabitCategory(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*HabitCategory, HabitCategorySlice](orm.Relationship{
		Name: "HabitCategory",
		Sides: []orm.RelSide{
			{
				From: TableNames.Habits,
				To:   TableNames.HabitCategories,
				FromColumns: []string{
					ColumnNames.Habits.HabitCategoryID,
				},
				ToColumns: []string{
					ColumnNames.HabitCategories.ID,
				},
			},
		},
	}, HabitCategories.Columns().Names(), opts...)
}

func ThenLoadHabitHabitCategory(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadHabitHabitCategory(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load HabitHabitCategory", retrieved)
		}

		err := loader.LoadHabitHabitCategory(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadHabitHabitCategory loads the habit's HabitCategory into the .R struct
func (o *Habit) LoadHabitHabitCategory(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.HabitCategory = nil

	related, err := o.HabitCategory(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Habits = HabitSlice{o}

	o.R.HabitCategory = related
	return nil
}

// LoadHabitHabitCategory loads the habit's HabitCategory into the .R struct
func (os HabitSlice) LoadHabitHabitCategory(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	habitCategories, err := os.HabitCategory(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range habitCategories {
			if o.HabitCategoryID != rel.ID {
				continue
			}

			rel.R.Habits = append(rel.R.Habits, o)

			o.R.HabitCategory = rel
			break
		}
	}

	return nil
}

func attachHabitDay0(ctx context.Context, exec bob.Executor, count int, habit0 *Habit, day1 *Day) (*Habit, error) {
	setter := &HabitSetter{
		DayID: omit.From(day1.ID),
	}

	err := habit0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachHabitDay0: %w", err)
	}

	return habit0, nil
}

func (habit0 *Habit) InsertDay(ctx context.Context, exec bob.Executor, related *DaySetter) error {
	day1, err := Days.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachHabitDay0(ctx, exec, 1, habit0, day1)
	if err != nil {
		return err
	}

	habit0.R.Day = day1

	day1.R.Habits = append(day1.R.Habits, habit0)

	return nil
}

func (habit0 *Habit) AttachDay(ctx context.Context, exec bob.Executor, day1 *Day) error {
	var err error

	_, err = attachHabitDay0(ctx, exec, 1, habit0, day1)
	if err != nil {
		return err
	}

	habit0.R.Day = day1

	day1.R.Habits = append(day1.R.Habits, habit0)

	return nil
}

func attachHabitHabitCategory0(ctx context.Context, exec bob.Executor, count int, habit0 *Habit, habitCategory1 *HabitCategory) (*Habit, error) {
	setter := &HabitSetter{
		HabitCategoryID: omit.From(habitCategory1.ID),
	}

	err := habit0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachHabitHabitCategory0: %w", err)
	}

	return habit0, nil
}

func (habit0 *Habit) InsertHabitCategory(ctx context.Context, exec bob.Executor, related *HabitCategorySetter) error {
	habitCategory1, err := HabitCategories.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachHabitHabitCategory0(ctx, exec, 1, habit0, habitCategory1)
	if err != nil {
		return err
	}

	habit0.R.HabitCategory = habitCategory1

	habitCategory1.R.Habits = append(habitCategory1.R.Habits, habit0)

	return nil
}

func (habit0 *Habit) AttachHabitCategory(ctx context.Context, exec bob.Executor, habitCategory1 *HabitCategory) error {
	var err error

	_, err = attachHabitHabitCategory0(ctx, exec, 1, habit0, habitCategory1)
	if err != nil {
		return err
	}

	habit0.R.HabitCategory = habitCategory1

	habitCategory1.R.Habits = append(habitCategory1.R.Habits, habit0)

	return nil
}
