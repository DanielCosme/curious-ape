// Code generated by BobGen sqlite v0.30.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// DeepWorkLog is an object representing the database table.
type DeepWorkLog struct {
	ID          int32          `db:"id,pk" `
	DayID       int32          `db:"day_id" `
	Date        time.Time      `db:"date" `
	Seconds     int32          `db:"seconds" `
	IsAutomated null.Val[bool] `db:"is_automated" `
	Origin      string         `db:"origin" `

	R deepWorkLogR `db:"-" `
}

// DeepWorkLogSlice is an alias for a slice of pointers to DeepWorkLog.
// This should almost always be used instead of []*DeepWorkLog.
type DeepWorkLogSlice []*DeepWorkLog

// DeepWorkLogs contains methods to work with the deep_work_logs table
var DeepWorkLogs = sqlite.NewTablex[*DeepWorkLog, DeepWorkLogSlice, *DeepWorkLogSetter]("", "deep_work_logs")

// DeepWorkLogsQuery is a query on the deep_work_logs table
type DeepWorkLogsQuery = *sqlite.ViewQuery[*DeepWorkLog, DeepWorkLogSlice]

// deepWorkLogR is where relationships are stored.
type deepWorkLogR struct {
	Day *Day // fk_deep_work_logs_0
}

type deepWorkLogColumnNames struct {
	ID          string
	DayID       string
	Date        string
	Seconds     string
	IsAutomated string
	Origin      string
}

var DeepWorkLogColumns = buildDeepWorkLogColumns("deep_work_logs")

type deepWorkLogColumns struct {
	tableAlias  string
	ID          sqlite.Expression
	DayID       sqlite.Expression
	Date        sqlite.Expression
	Seconds     sqlite.Expression
	IsAutomated sqlite.Expression
	Origin      sqlite.Expression
}

func (c deepWorkLogColumns) Alias() string {
	return c.tableAlias
}

func (deepWorkLogColumns) AliasedAs(alias string) deepWorkLogColumns {
	return buildDeepWorkLogColumns(alias)
}

func buildDeepWorkLogColumns(alias string) deepWorkLogColumns {
	return deepWorkLogColumns{
		tableAlias:  alias,
		ID:          sqlite.Quote(alias, "id"),
		DayID:       sqlite.Quote(alias, "day_id"),
		Date:        sqlite.Quote(alias, "date"),
		Seconds:     sqlite.Quote(alias, "seconds"),
		IsAutomated: sqlite.Quote(alias, "is_automated"),
		Origin:      sqlite.Quote(alias, "origin"),
	}
}

type deepWorkLogWhere[Q sqlite.Filterable] struct {
	ID          sqlite.WhereMod[Q, int32]
	DayID       sqlite.WhereMod[Q, int32]
	Date        sqlite.WhereMod[Q, time.Time]
	Seconds     sqlite.WhereMod[Q, int32]
	IsAutomated sqlite.WhereNullMod[Q, bool]
	Origin      sqlite.WhereMod[Q, string]
}

func (deepWorkLogWhere[Q]) AliasedAs(alias string) deepWorkLogWhere[Q] {
	return buildDeepWorkLogWhere[Q](buildDeepWorkLogColumns(alias))
}

func buildDeepWorkLogWhere[Q sqlite.Filterable](cols deepWorkLogColumns) deepWorkLogWhere[Q] {
	return deepWorkLogWhere[Q]{
		ID:          sqlite.Where[Q, int32](cols.ID),
		DayID:       sqlite.Where[Q, int32](cols.DayID),
		Date:        sqlite.Where[Q, time.Time](cols.Date),
		Seconds:     sqlite.Where[Q, int32](cols.Seconds),
		IsAutomated: sqlite.WhereNull[Q, bool](cols.IsAutomated),
		Origin:      sqlite.Where[Q, string](cols.Origin),
	}
}

var DeepWorkLogErrors = &deepWorkLogErrors{
	ErrUniqueDayIdAndOrigin: &UniqueConstraintError{s: "deep_work_logs.day_id, deep_work_logs.origin"},
}

type deepWorkLogErrors struct {
	ErrUniqueDayIdAndOrigin *UniqueConstraintError
}

// DeepWorkLogSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type DeepWorkLogSetter struct {
	ID          omit.Val[int32]     `db:"id,pk" `
	DayID       omit.Val[int32]     `db:"day_id" `
	Date        omit.Val[time.Time] `db:"date" `
	Seconds     omit.Val[int32]     `db:"seconds" `
	IsAutomated omitnull.Val[bool]  `db:"is_automated" `
	Origin      omit.Val[string]    `db:"origin" `
}

func (s DeepWorkLogSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.DayID.IsUnset() {
		vals = append(vals, "day_id")
	}

	if !s.Date.IsUnset() {
		vals = append(vals, "date")
	}

	if !s.Seconds.IsUnset() {
		vals = append(vals, "seconds")
	}

	if !s.IsAutomated.IsUnset() {
		vals = append(vals, "is_automated")
	}

	if !s.Origin.IsUnset() {
		vals = append(vals, "origin")
	}

	return vals
}

func (s DeepWorkLogSetter) Overwrite(t *DeepWorkLog) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.DayID.IsUnset() {
		t.DayID, _ = s.DayID.Get()
	}
	if !s.Date.IsUnset() {
		t.Date, _ = s.Date.Get()
	}
	if !s.Seconds.IsUnset() {
		t.Seconds, _ = s.Seconds.Get()
	}
	if !s.IsAutomated.IsUnset() {
		t.IsAutomated, _ = s.IsAutomated.GetNull()
	}
	if !s.Origin.IsUnset() {
		t.Origin, _ = s.Origin.Get()
	}
}

func (s *DeepWorkLogSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return DeepWorkLogs.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.Table.Columns) == 0 {
		q.Table.Columns = s.SetColumns()
	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 6)
		if !s.ID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.ID))
		}

		if !s.DayID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.DayID))
		}

		if !s.Date.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Date))
		}

		if !s.Seconds.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Seconds))
		}

		if !s.IsAutomated.IsUnset() {
			vals = append(vals, sqlite.Arg(s.IsAutomated))
		}

		if !s.Origin.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Origin))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s DeepWorkLogSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s DeepWorkLogSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.DayID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "day_id")...),
			sqlite.Arg(s.DayID),
		}})
	}

	if !s.Date.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "date")...),
			sqlite.Arg(s.Date),
		}})
	}

	if !s.Seconds.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "seconds")...),
			sqlite.Arg(s.Seconds),
		}})
	}

	if !s.IsAutomated.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "is_automated")...),
			sqlite.Arg(s.IsAutomated),
		}})
	}

	if !s.Origin.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "origin")...),
			sqlite.Arg(s.Origin),
		}})
	}

	return exprs
}

// FindDeepWorkLog retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindDeepWorkLog(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*DeepWorkLog, error) {
	if len(cols) == 0 {
		return DeepWorkLogs.Query(
			SelectWhere.DeepWorkLogs.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return DeepWorkLogs.Query(
		SelectWhere.DeepWorkLogs.ID.EQ(IDPK),
		sm.Columns(DeepWorkLogs.Columns().Only(cols...)),
	).One(ctx, exec)
}

// DeepWorkLogExists checks the presence of a single record by primary key
func DeepWorkLogExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return DeepWorkLogs.Query(
		SelectWhere.DeepWorkLogs.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after DeepWorkLog is retrieved from the database
func (o *DeepWorkLog) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = DeepWorkLogs.AfterSelectHooks.RunHooks(ctx, exec, DeepWorkLogSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = DeepWorkLogs.AfterInsertHooks.RunHooks(ctx, exec, DeepWorkLogSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = DeepWorkLogs.AfterUpdateHooks.RunHooks(ctx, exec, DeepWorkLogSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = DeepWorkLogs.AfterDeleteHooks.RunHooks(ctx, exec, DeepWorkLogSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the DeepWorkLog
func (o *DeepWorkLog) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *DeepWorkLog) pkEQ() dialect.Expression {
	return sqlite.Quote("deep_work_logs", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the DeepWorkLog
func (o *DeepWorkLog) Update(ctx context.Context, exec bob.Executor, s *DeepWorkLogSetter) error {
	v, err := DeepWorkLogs.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single DeepWorkLog record with an executor
func (o *DeepWorkLog) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := DeepWorkLogs.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the DeepWorkLog using the executor
func (o *DeepWorkLog) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := DeepWorkLogs.Query(
		SelectWhere.DeepWorkLogs.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after DeepWorkLogSlice is retrieved from the database
func (o DeepWorkLogSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = DeepWorkLogs.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = DeepWorkLogs.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = DeepWorkLogs.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = DeepWorkLogs.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o DeepWorkLogSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("deep_work_logs", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o DeepWorkLogSlice) copyMatchingRows(from ...*DeepWorkLog) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o DeepWorkLogSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return DeepWorkLogs.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *DeepWorkLog:
				o.copyMatchingRows(retrieved)
			case []*DeepWorkLog:
				o.copyMatchingRows(retrieved...)
			case DeepWorkLogSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a DeepWorkLog or a slice of DeepWorkLog
				// then run the AfterUpdateHooks on the slice
				_, err = DeepWorkLogs.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o DeepWorkLogSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return DeepWorkLogs.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *DeepWorkLog:
				o.copyMatchingRows(retrieved)
			case []*DeepWorkLog:
				o.copyMatchingRows(retrieved...)
			case DeepWorkLogSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a DeepWorkLog or a slice of DeepWorkLog
				// then run the AfterDeleteHooks on the slice
				_, err = DeepWorkLogs.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o DeepWorkLogSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals DeepWorkLogSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := DeepWorkLogs.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o DeepWorkLogSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := DeepWorkLogs.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o DeepWorkLogSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := DeepWorkLogs.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type deepWorkLogJoins[Q dialect.Joinable] struct {
	typ string
	Day func(context.Context) modAs[Q, dayColumns]
}

func (j deepWorkLogJoins[Q]) aliasedAs(alias string) deepWorkLogJoins[Q] {
	return buildDeepWorkLogJoins[Q](buildDeepWorkLogColumns(alias), j.typ)
}

func buildDeepWorkLogJoins[Q dialect.Joinable](cols deepWorkLogColumns, typ string) deepWorkLogJoins[Q] {
	return deepWorkLogJoins[Q]{
		typ: typ,
		Day: deepWorkLogsJoinDay[Q](cols, typ),
	}
}

func deepWorkLogsJoinDay[Q dialect.Joinable](from deepWorkLogColumns, typ string) func(context.Context) modAs[Q, dayColumns] {
	return func(ctx context.Context) modAs[Q, dayColumns] {
		return modAs[Q, dayColumns]{
			c: DayColumns,
			f: func(to dayColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Days.Name().As(to.Alias())).On(
						to.ID.EQ(from.DayID),
					))
				}

				return mods
			},
		}
	}
}

// Day starts a query for related objects on days
func (o *DeepWorkLog) Day(mods ...bob.Mod[*dialect.SelectQuery]) DaysQuery {
	return Days.Query(append(mods,
		sm.Where(DayColumns.ID.EQ(sqlite.Arg(o.DayID))),
	)...)
}

func (os DeepWorkLogSlice) Day(mods ...bob.Mod[*dialect.SelectQuery]) DaysQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.DayID)
	}

	return Days.Query(append(mods,
		sm.Where(sqlite.Group(DayColumns.ID).In(PKArgs...)),
	)...)
}

func (o *DeepWorkLog) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Day":
		rel, ok := retrieved.(*Day)
		if !ok {
			return fmt.Errorf("deepWorkLog cannot load %T as %q", retrieved, name)
		}

		o.R.Day = rel

		if rel != nil {
			rel.R.DeepWorkLogs = DeepWorkLogSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("deepWorkLog has no relationship %q", name)
	}
}

func PreloadDeepWorkLogDay(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Day, DaySlice](orm.Relationship{
		Name: "Day",
		Sides: []orm.RelSide{
			{
				From: TableNames.DeepWorkLogs,
				To:   TableNames.Days,
				FromColumns: []string{
					ColumnNames.DeepWorkLogs.DayID,
				},
				ToColumns: []string{
					ColumnNames.Days.ID,
				},
			},
		},
	}, Days.Columns().Names(), opts...)
}

func ThenLoadDeepWorkLogDay(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadDeepWorkLogDay(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load DeepWorkLogDay", retrieved)
		}

		err := loader.LoadDeepWorkLogDay(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadDeepWorkLogDay loads the deepWorkLog's Day into the .R struct
func (o *DeepWorkLog) LoadDeepWorkLogDay(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Day = nil

	related, err := o.Day(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.DeepWorkLogs = DeepWorkLogSlice{o}

	o.R.Day = related
	return nil
}

// LoadDeepWorkLogDay loads the deepWorkLog's Day into the .R struct
func (os DeepWorkLogSlice) LoadDeepWorkLogDay(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	days, err := os.Day(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range days {
			if o.DayID != rel.ID {
				continue
			}

			rel.R.DeepWorkLogs = append(rel.R.DeepWorkLogs, o)

			o.R.Day = rel
			break
		}
	}

	return nil
}

func attachDeepWorkLogDay0(ctx context.Context, exec bob.Executor, count int, deepWorkLog0 *DeepWorkLog, day1 *Day) (*DeepWorkLog, error) {
	setter := &DeepWorkLogSetter{
		DayID: omit.From(day1.ID),
	}

	err := deepWorkLog0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachDeepWorkLogDay0: %w", err)
	}

	return deepWorkLog0, nil
}

func (deepWorkLog0 *DeepWorkLog) InsertDay(ctx context.Context, exec bob.Executor, related *DaySetter) error {
	day1, err := Days.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachDeepWorkLogDay0(ctx, exec, 1, deepWorkLog0, day1)
	if err != nil {
		return err
	}

	deepWorkLog0.R.Day = day1

	day1.R.DeepWorkLogs = append(day1.R.DeepWorkLogs, deepWorkLog0)

	return nil
}

func (deepWorkLog0 *DeepWorkLog) AttachDay(ctx context.Context, exec bob.Executor, day1 *Day) error {
	var err error

	_, err = attachDeepWorkLogDay0(ctx, exec, 1, deepWorkLog0, day1)
	if err != nil {
		return err
	}

	deepWorkLog0.R.Day = day1

	day1.R.DeepWorkLogs = append(day1.R.DeepWorkLogs, deepWorkLog0)

	return nil
}
