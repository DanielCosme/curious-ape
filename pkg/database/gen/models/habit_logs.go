// Code generated by BobGen sqlite v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// HabitLog is an object representing the database table.
type HabitLog struct {
	ID          int32  `db:"id,pk" `
	HabitID     int32  `db:"habit_id" `
	Origin      string `db:"origin" `
	Success     bool   `db:"success" `
	IsAutomated bool   `db:"is_automated" `
	Detail      string `db:"detail" `

	R habitLogR `db:"-" `
}

// HabitLogSlice is an alias for a slice of pointers to HabitLog.
// This should almost always be used instead of []*HabitLog.
type HabitLogSlice []*HabitLog

// HabitLogs contains methods to work with the habit_logs table
var HabitLogs = sqlite.NewTablex[*HabitLog, HabitLogSlice, *HabitLogSetter]("", "habit_logs")

// HabitLogsQuery is a query on the habit_logs table
type HabitLogsQuery = *sqlite.ViewQuery[*HabitLog, HabitLogSlice]

// HabitLogsStmt is a prepared statment on habit_logs
type HabitLogsStmt = bob.QueryStmt[*HabitLog, HabitLogSlice]

// habitLogR is where relationships are stored.
type habitLogR struct {
	Habit *Habit // fk_habit_logs_0
}

// HabitLogSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HabitLogSetter struct {
	ID          omit.Val[int32]  `db:"id,pk" `
	HabitID     omit.Val[int32]  `db:"habit_id" `
	Origin      omit.Val[string] `db:"origin" `
	Success     omit.Val[bool]   `db:"success" `
	IsAutomated omit.Val[bool]   `db:"is_automated" `
	Detail      omit.Val[string] `db:"detail" `
}

func (s HabitLogSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.HabitID.IsUnset() {
		vals = append(vals, "habit_id")
	}

	if !s.Origin.IsUnset() {
		vals = append(vals, "origin")
	}

	if !s.Success.IsUnset() {
		vals = append(vals, "success")
	}

	if !s.IsAutomated.IsUnset() {
		vals = append(vals, "is_automated")
	}

	if !s.Detail.IsUnset() {
		vals = append(vals, "detail")
	}

	return vals
}

func (s HabitLogSetter) Overwrite(t *HabitLog) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.HabitID.IsUnset() {
		t.HabitID, _ = s.HabitID.Get()
	}
	if !s.Origin.IsUnset() {
		t.Origin, _ = s.Origin.Get()
	}
	if !s.Success.IsUnset() {
		t.Success, _ = s.Success.Get()
	}
	if !s.IsAutomated.IsUnset() {
		t.IsAutomated, _ = s.IsAutomated.Get()
	}
	if !s.Detail.IsUnset() {
		t.Detail, _ = s.Detail.Get()
	}
}

func (s HabitLogSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.HabitID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.HabitID))
	}

	if !s.Origin.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Origin))
	}

	if !s.Success.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Success))
	}

	if !s.IsAutomated.IsUnset() {
		vals = append(vals, sqlite.Arg(s.IsAutomated))
	}

	if !s.Detail.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Detail))
	}

	return im.Values(vals...)
}

func (s HabitLogSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s HabitLogSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.HabitID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "habit_id")...),
			sqlite.Arg(s.HabitID),
		}})
	}

	if !s.Origin.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "origin")...),
			sqlite.Arg(s.Origin),
		}})
	}

	if !s.Success.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "success")...),
			sqlite.Arg(s.Success),
		}})
	}

	if !s.IsAutomated.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "is_automated")...),
			sqlite.Arg(s.IsAutomated),
		}})
	}

	if !s.Detail.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "detail")...),
			sqlite.Arg(s.Detail),
		}})
	}

	return exprs
}

type habitLogColumnNames struct {
	ID          string
	HabitID     string
	Origin      string
	Success     string
	IsAutomated string
	Detail      string
}

var HabitLogColumns = buildHabitLogColumns("habit_logs")

type habitLogColumns struct {
	tableAlias  string
	ID          sqlite.Expression
	HabitID     sqlite.Expression
	Origin      sqlite.Expression
	Success     sqlite.Expression
	IsAutomated sqlite.Expression
	Detail      sqlite.Expression
}

func (c habitLogColumns) Alias() string {
	return c.tableAlias
}

func (habitLogColumns) AliasedAs(alias string) habitLogColumns {
	return buildHabitLogColumns(alias)
}

func buildHabitLogColumns(alias string) habitLogColumns {
	return habitLogColumns{
		tableAlias:  alias,
		ID:          sqlite.Quote(alias, "id"),
		HabitID:     sqlite.Quote(alias, "habit_id"),
		Origin:      sqlite.Quote(alias, "origin"),
		Success:     sqlite.Quote(alias, "success"),
		IsAutomated: sqlite.Quote(alias, "is_automated"),
		Detail:      sqlite.Quote(alias, "detail"),
	}
}

type habitLogWhere[Q sqlite.Filterable] struct {
	ID          sqlite.WhereMod[Q, int32]
	HabitID     sqlite.WhereMod[Q, int32]
	Origin      sqlite.WhereMod[Q, string]
	Success     sqlite.WhereMod[Q, bool]
	IsAutomated sqlite.WhereMod[Q, bool]
	Detail      sqlite.WhereMod[Q, string]
}

func (habitLogWhere[Q]) AliasedAs(alias string) habitLogWhere[Q] {
	return buildHabitLogWhere[Q](buildHabitLogColumns(alias))
}

func buildHabitLogWhere[Q sqlite.Filterable](cols habitLogColumns) habitLogWhere[Q] {
	return habitLogWhere[Q]{
		ID:          sqlite.Where[Q, int32](cols.ID),
		HabitID:     sqlite.Where[Q, int32](cols.HabitID),
		Origin:      sqlite.Where[Q, string](cols.Origin),
		Success:     sqlite.Where[Q, bool](cols.Success),
		IsAutomated: sqlite.Where[Q, bool](cols.IsAutomated),
		Detail:      sqlite.Where[Q, string](cols.Detail),
	}
}

type habitLogJoins[Q dialect.Joinable] struct {
	typ   string
	Habit func(context.Context) modAs[Q, habitColumns]
}

func (j habitLogJoins[Q]) aliasedAs(alias string) habitLogJoins[Q] {
	return buildHabitLogJoins[Q](buildHabitLogColumns(alias), j.typ)
}

func buildHabitLogJoins[Q dialect.Joinable](cols habitLogColumns, typ string) habitLogJoins[Q] {
	return habitLogJoins[Q]{
		typ:   typ,
		Habit: habitLogsJoinHabit[Q](cols, typ),
	}
}

// FindHabitLog retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHabitLog(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*HabitLog, error) {
	if len(cols) == 0 {
		return HabitLogs.Query(
			ctx, exec,
			SelectWhere.HabitLogs.ID.EQ(IDPK),
		).One()
	}

	return HabitLogs.Query(
		ctx, exec,
		SelectWhere.HabitLogs.ID.EQ(IDPK),
		sm.Columns(HabitLogs.Columns().Only(cols...)),
	).One()
}

// HabitLogExists checks the presence of a single record by primary key
func HabitLogExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return HabitLogs.Query(
		ctx, exec,
		SelectWhere.HabitLogs.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the HabitLog
func (o *HabitLog) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the HabitLog
func (o *HabitLog) Update(ctx context.Context, exec bob.Executor, s *HabitLogSetter) error {
	return HabitLogs.Update(ctx, exec, s, o)
}

// Delete deletes a single HabitLog record with an executor
func (o *HabitLog) Delete(ctx context.Context, exec bob.Executor) error {
	return HabitLogs.Delete(ctx, exec, o)
}

// Reload refreshes the HabitLog using the executor
func (o *HabitLog) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HabitLogs.Query(
		ctx, exec,
		SelectWhere.HabitLogs.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o HabitLogSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HabitLogSetter) error {
	return HabitLogs.Update(ctx, exec, &vals, o...)
}

func (o HabitLogSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return HabitLogs.Delete(ctx, exec, o...)
}

func (o HabitLogSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.HabitLogs.ID.In(IDPK...),
	)

	o2, err := HabitLogs.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func habitLogsJoinHabit[Q dialect.Joinable](from habitLogColumns, typ string) func(context.Context) modAs[Q, habitColumns] {
	return func(ctx context.Context) modAs[Q, habitColumns] {
		return modAs[Q, habitColumns]{
			c: HabitColumns,
			f: func(to habitColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Habits.Name(ctx).As(to.Alias())).On(
						to.ID.EQ(from.HabitID),
					))
				}

				return mods
			},
		}
	}
}

// Habit starts a query for related objects on habits
func (o *HabitLog) Habit(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) HabitsQuery {
	return Habits.Query(ctx, exec, append(mods,
		sm.Where(HabitColumns.ID.EQ(sqlite.Arg(o.HabitID))),
	)...)
}

func (os HabitLogSlice) Habit(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) HabitsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.HabitID)
	}

	return Habits.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(HabitColumns.ID).In(PKArgs...)),
	)...)
}

func (o *HabitLog) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Habit":
		rel, ok := retrieved.(*Habit)
		if !ok {
			return fmt.Errorf("habitLog cannot load %T as %q", retrieved, name)
		}

		o.R.Habit = rel

		if rel != nil {
			rel.R.HabitLogs = HabitLogSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("habitLog has no relationship %q", name)
	}
}

func PreloadHabitLogHabit(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Habit, HabitSlice](orm.Relationship{
		Name: "Habit",
		Sides: []orm.RelSide{
			{
				From: "habit_logs",
				To:   TableNames.Habits,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Habits.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.HabitLogs.HabitID,
				},
				ToColumns: []string{
					ColumnNames.Habits.ID,
				},
			},
		},
	}, Habits.Columns().Names(), opts...)
}

func ThenLoadHabitLogHabit(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadHabitLogHabit(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load HabitLogHabit", retrieved)
		}

		err := loader.LoadHabitLogHabit(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadHabitLogHabit loads the habitLog's Habit into the .R struct
func (o *HabitLog) LoadHabitLogHabit(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Habit = nil

	related, err := o.Habit(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.HabitLogs = HabitLogSlice{o}

	o.R.Habit = related
	return nil
}

// LoadHabitLogHabit loads the habitLog's Habit into the .R struct
func (os HabitLogSlice) LoadHabitLogHabit(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	habits, err := os.Habit(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range habits {
			if o.HabitID != rel.ID {
				continue
			}

			rel.R.HabitLogs = append(rel.R.HabitLogs, o)

			o.R.Habit = rel
			break
		}
	}

	return nil
}

func attachHabitLogHabit0(ctx context.Context, exec bob.Executor, count int, habitLog0 *HabitLog, habit1 *Habit) (*HabitLog, error) {
	setter := &HabitLogSetter{
		HabitID: omit.From(habit1.ID),
	}

	err := HabitLogs.Update(ctx, exec, setter, habitLog0)
	if err != nil {
		return nil, fmt.Errorf("attachHabitLogHabit0: %w", err)
	}

	return habitLog0, nil
}

func (habitLog0 *HabitLog) InsertHabit(ctx context.Context, exec bob.Executor, related *HabitSetter) error {
	habit1, err := Habits.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachHabitLogHabit0(ctx, exec, 1, habitLog0, habit1)
	if err != nil {
		return err
	}

	habitLog0.R.Habit = habit1

	habit1.R.HabitLogs = append(habit1.R.HabitLogs, habitLog0)

	return nil
}

func (habitLog0 *HabitLog) AttachHabit(ctx context.Context, exec bob.Executor, habit1 *Habit) error {
	var err error

	_, err = attachHabitLogHabit0(ctx, exec, 1, habitLog0, habit1)
	if err != nil {
		return err
	}

	habitLog0.R.Habit = habit1

	habit1.R.HabitLogs = append(habit1.R.HabitLogs, habitLog0)

	return nil
}
