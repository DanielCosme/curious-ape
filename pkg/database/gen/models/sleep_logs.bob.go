// Code generated by BobGen sqlite v0.30.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// SleepLog is an object representing the database table.
type SleepLog struct {
	ID             int32            `db:"id,pk" `
	DayID          int32            `db:"day_id" `
	Date           time.Time        `db:"date" `
	StartTime      time.Time        `db:"start_time" `
	EndTime        time.Time        `db:"end_time" `
	IsMainSleep    null.Val[bool]   `db:"is_main_sleep" `
	TotalTimeInBed null.Val[int32]  `db:"total_time_in_bed" `
	MinutesAsleep  null.Val[int32]  `db:"minutes_asleep" `
	Origin         string           `db:"origin" `
	Raw            null.Val[string] `db:"raw" `

	R sleepLogR `db:"-" `
}

// SleepLogSlice is an alias for a slice of pointers to SleepLog.
// This should almost always be used instead of []*SleepLog.
type SleepLogSlice []*SleepLog

// SleepLogs contains methods to work with the sleep_logs table
var SleepLogs = sqlite.NewTablex[*SleepLog, SleepLogSlice, *SleepLogSetter]("", "sleep_logs")

// SleepLogsQuery is a query on the sleep_logs table
type SleepLogsQuery = *sqlite.ViewQuery[*SleepLog, SleepLogSlice]

// sleepLogR is where relationships are stored.
type sleepLogR struct {
	Day *Day // fk_sleep_logs_0
}

type sleepLogColumnNames struct {
	ID             string
	DayID          string
	Date           string
	StartTime      string
	EndTime        string
	IsMainSleep    string
	TotalTimeInBed string
	MinutesAsleep  string
	Origin         string
	Raw            string
}

var SleepLogColumns = buildSleepLogColumns("sleep_logs")

type sleepLogColumns struct {
	tableAlias     string
	ID             sqlite.Expression
	DayID          sqlite.Expression
	Date           sqlite.Expression
	StartTime      sqlite.Expression
	EndTime        sqlite.Expression
	IsMainSleep    sqlite.Expression
	TotalTimeInBed sqlite.Expression
	MinutesAsleep  sqlite.Expression
	Origin         sqlite.Expression
	Raw            sqlite.Expression
}

func (c sleepLogColumns) Alias() string {
	return c.tableAlias
}

func (sleepLogColumns) AliasedAs(alias string) sleepLogColumns {
	return buildSleepLogColumns(alias)
}

func buildSleepLogColumns(alias string) sleepLogColumns {
	return sleepLogColumns{
		tableAlias:     alias,
		ID:             sqlite.Quote(alias, "id"),
		DayID:          sqlite.Quote(alias, "day_id"),
		Date:           sqlite.Quote(alias, "date"),
		StartTime:      sqlite.Quote(alias, "start_time"),
		EndTime:        sqlite.Quote(alias, "end_time"),
		IsMainSleep:    sqlite.Quote(alias, "is_main_sleep"),
		TotalTimeInBed: sqlite.Quote(alias, "total_time_in_bed"),
		MinutesAsleep:  sqlite.Quote(alias, "minutes_asleep"),
		Origin:         sqlite.Quote(alias, "origin"),
		Raw:            sqlite.Quote(alias, "raw"),
	}
}

type sleepLogWhere[Q sqlite.Filterable] struct {
	ID             sqlite.WhereMod[Q, int32]
	DayID          sqlite.WhereMod[Q, int32]
	Date           sqlite.WhereMod[Q, time.Time]
	StartTime      sqlite.WhereMod[Q, time.Time]
	EndTime        sqlite.WhereMod[Q, time.Time]
	IsMainSleep    sqlite.WhereNullMod[Q, bool]
	TotalTimeInBed sqlite.WhereNullMod[Q, int32]
	MinutesAsleep  sqlite.WhereNullMod[Q, int32]
	Origin         sqlite.WhereMod[Q, string]
	Raw            sqlite.WhereNullMod[Q, string]
}

func (sleepLogWhere[Q]) AliasedAs(alias string) sleepLogWhere[Q] {
	return buildSleepLogWhere[Q](buildSleepLogColumns(alias))
}

func buildSleepLogWhere[Q sqlite.Filterable](cols sleepLogColumns) sleepLogWhere[Q] {
	return sleepLogWhere[Q]{
		ID:             sqlite.Where[Q, int32](cols.ID),
		DayID:          sqlite.Where[Q, int32](cols.DayID),
		Date:           sqlite.Where[Q, time.Time](cols.Date),
		StartTime:      sqlite.Where[Q, time.Time](cols.StartTime),
		EndTime:        sqlite.Where[Q, time.Time](cols.EndTime),
		IsMainSleep:    sqlite.WhereNull[Q, bool](cols.IsMainSleep),
		TotalTimeInBed: sqlite.WhereNull[Q, int32](cols.TotalTimeInBed),
		MinutesAsleep:  sqlite.WhereNull[Q, int32](cols.MinutesAsleep),
		Origin:         sqlite.Where[Q, string](cols.Origin),
		Raw:            sqlite.WhereNull[Q, string](cols.Raw),
	}
}

var SleepLogErrors = &sleepLogErrors{
	ErrUniqueDayIdAndIsMainSleep: &UniqueConstraintError{s: "sleep_logs.day_id, sleep_logs.is_main_sleep"},
}

type sleepLogErrors struct {
	ErrUniqueDayIdAndIsMainSleep *UniqueConstraintError
}

// SleepLogSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type SleepLogSetter struct {
	ID             omit.Val[int32]      `db:"id,pk" `
	DayID          omit.Val[int32]      `db:"day_id" `
	Date           omit.Val[time.Time]  `db:"date" `
	StartTime      omit.Val[time.Time]  `db:"start_time" `
	EndTime        omit.Val[time.Time]  `db:"end_time" `
	IsMainSleep    omitnull.Val[bool]   `db:"is_main_sleep" `
	TotalTimeInBed omitnull.Val[int32]  `db:"total_time_in_bed" `
	MinutesAsleep  omitnull.Val[int32]  `db:"minutes_asleep" `
	Origin         omit.Val[string]     `db:"origin" `
	Raw            omitnull.Val[string] `db:"raw" `
}

func (s SleepLogSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.DayID.IsUnset() {
		vals = append(vals, "day_id")
	}

	if !s.Date.IsUnset() {
		vals = append(vals, "date")
	}

	if !s.StartTime.IsUnset() {
		vals = append(vals, "start_time")
	}

	if !s.EndTime.IsUnset() {
		vals = append(vals, "end_time")
	}

	if !s.IsMainSleep.IsUnset() {
		vals = append(vals, "is_main_sleep")
	}

	if !s.TotalTimeInBed.IsUnset() {
		vals = append(vals, "total_time_in_bed")
	}

	if !s.MinutesAsleep.IsUnset() {
		vals = append(vals, "minutes_asleep")
	}

	if !s.Origin.IsUnset() {
		vals = append(vals, "origin")
	}

	if !s.Raw.IsUnset() {
		vals = append(vals, "raw")
	}

	return vals
}

func (s SleepLogSetter) Overwrite(t *SleepLog) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.DayID.IsUnset() {
		t.DayID, _ = s.DayID.Get()
	}
	if !s.Date.IsUnset() {
		t.Date, _ = s.Date.Get()
	}
	if !s.StartTime.IsUnset() {
		t.StartTime, _ = s.StartTime.Get()
	}
	if !s.EndTime.IsUnset() {
		t.EndTime, _ = s.EndTime.Get()
	}
	if !s.IsMainSleep.IsUnset() {
		t.IsMainSleep, _ = s.IsMainSleep.GetNull()
	}
	if !s.TotalTimeInBed.IsUnset() {
		t.TotalTimeInBed, _ = s.TotalTimeInBed.GetNull()
	}
	if !s.MinutesAsleep.IsUnset() {
		t.MinutesAsleep, _ = s.MinutesAsleep.GetNull()
	}
	if !s.Origin.IsUnset() {
		t.Origin, _ = s.Origin.Get()
	}
	if !s.Raw.IsUnset() {
		t.Raw, _ = s.Raw.GetNull()
	}
}

func (s *SleepLogSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return SleepLogs.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.Table.Columns) == 0 {
		q.Table.Columns = s.SetColumns()
	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 10)
		if !s.ID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.ID))
		}

		if !s.DayID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.DayID))
		}

		if !s.Date.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Date))
		}

		if !s.StartTime.IsUnset() {
			vals = append(vals, sqlite.Arg(s.StartTime))
		}

		if !s.EndTime.IsUnset() {
			vals = append(vals, sqlite.Arg(s.EndTime))
		}

		if !s.IsMainSleep.IsUnset() {
			vals = append(vals, sqlite.Arg(s.IsMainSleep))
		}

		if !s.TotalTimeInBed.IsUnset() {
			vals = append(vals, sqlite.Arg(s.TotalTimeInBed))
		}

		if !s.MinutesAsleep.IsUnset() {
			vals = append(vals, sqlite.Arg(s.MinutesAsleep))
		}

		if !s.Origin.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Origin))
		}

		if !s.Raw.IsUnset() {
			vals = append(vals, sqlite.Arg(s.Raw))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s SleepLogSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s SleepLogSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 10)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.DayID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "day_id")...),
			sqlite.Arg(s.DayID),
		}})
	}

	if !s.Date.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "date")...),
			sqlite.Arg(s.Date),
		}})
	}

	if !s.StartTime.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "start_time")...),
			sqlite.Arg(s.StartTime),
		}})
	}

	if !s.EndTime.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "end_time")...),
			sqlite.Arg(s.EndTime),
		}})
	}

	if !s.IsMainSleep.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "is_main_sleep")...),
			sqlite.Arg(s.IsMainSleep),
		}})
	}

	if !s.TotalTimeInBed.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "total_time_in_bed")...),
			sqlite.Arg(s.TotalTimeInBed),
		}})
	}

	if !s.MinutesAsleep.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "minutes_asleep")...),
			sqlite.Arg(s.MinutesAsleep),
		}})
	}

	if !s.Origin.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "origin")...),
			sqlite.Arg(s.Origin),
		}})
	}

	if !s.Raw.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "raw")...),
			sqlite.Arg(s.Raw),
		}})
	}

	return exprs
}

// FindSleepLog retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindSleepLog(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*SleepLog, error) {
	if len(cols) == 0 {
		return SleepLogs.Query(
			SelectWhere.SleepLogs.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return SleepLogs.Query(
		SelectWhere.SleepLogs.ID.EQ(IDPK),
		sm.Columns(SleepLogs.Columns().Only(cols...)),
	).One(ctx, exec)
}

// SleepLogExists checks the presence of a single record by primary key
func SleepLogExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return SleepLogs.Query(
		SelectWhere.SleepLogs.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after SleepLog is retrieved from the database
func (o *SleepLog) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SleepLogs.AfterSelectHooks.RunHooks(ctx, exec, SleepLogSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = SleepLogs.AfterInsertHooks.RunHooks(ctx, exec, SleepLogSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = SleepLogs.AfterUpdateHooks.RunHooks(ctx, exec, SleepLogSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = SleepLogs.AfterDeleteHooks.RunHooks(ctx, exec, SleepLogSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the SleepLog
func (o *SleepLog) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *SleepLog) pkEQ() dialect.Expression {
	return sqlite.Quote("sleep_logs", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the SleepLog
func (o *SleepLog) Update(ctx context.Context, exec bob.Executor, s *SleepLogSetter) error {
	v, err := SleepLogs.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single SleepLog record with an executor
func (o *SleepLog) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := SleepLogs.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the SleepLog using the executor
func (o *SleepLog) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := SleepLogs.Query(
		SelectWhere.SleepLogs.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after SleepLogSlice is retrieved from the database
func (o SleepLogSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SleepLogs.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = SleepLogs.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = SleepLogs.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = SleepLogs.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o SleepLogSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("sleep_logs", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o SleepLogSlice) copyMatchingRows(from ...*SleepLog) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o SleepLogSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SleepLogs.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SleepLog:
				o.copyMatchingRows(retrieved)
			case []*SleepLog:
				o.copyMatchingRows(retrieved...)
			case SleepLogSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SleepLog or a slice of SleepLog
				// then run the AfterUpdateHooks on the slice
				_, err = SleepLogs.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o SleepLogSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SleepLogs.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SleepLog:
				o.copyMatchingRows(retrieved)
			case []*SleepLog:
				o.copyMatchingRows(retrieved...)
			case SleepLogSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SleepLog or a slice of SleepLog
				// then run the AfterDeleteHooks on the slice
				_, err = SleepLogs.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o SleepLogSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals SleepLogSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SleepLogs.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o SleepLogSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SleepLogs.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o SleepLogSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := SleepLogs.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type sleepLogJoins[Q dialect.Joinable] struct {
	typ string
	Day func(context.Context) modAs[Q, dayColumns]
}

func (j sleepLogJoins[Q]) aliasedAs(alias string) sleepLogJoins[Q] {
	return buildSleepLogJoins[Q](buildSleepLogColumns(alias), j.typ)
}

func buildSleepLogJoins[Q dialect.Joinable](cols sleepLogColumns, typ string) sleepLogJoins[Q] {
	return sleepLogJoins[Q]{
		typ: typ,
		Day: sleepLogsJoinDay[Q](cols, typ),
	}
}

func sleepLogsJoinDay[Q dialect.Joinable](from sleepLogColumns, typ string) func(context.Context) modAs[Q, dayColumns] {
	return func(ctx context.Context) modAs[Q, dayColumns] {
		return modAs[Q, dayColumns]{
			c: DayColumns,
			f: func(to dayColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Days.Name().As(to.Alias())).On(
						to.ID.EQ(from.DayID),
					))
				}

				return mods
			},
		}
	}
}

// Day starts a query for related objects on days
func (o *SleepLog) Day(mods ...bob.Mod[*dialect.SelectQuery]) DaysQuery {
	return Days.Query(append(mods,
		sm.Where(DayColumns.ID.EQ(sqlite.Arg(o.DayID))),
	)...)
}

func (os SleepLogSlice) Day(mods ...bob.Mod[*dialect.SelectQuery]) DaysQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.DayID)
	}

	return Days.Query(append(mods,
		sm.Where(sqlite.Group(DayColumns.ID).In(PKArgs...)),
	)...)
}

func (o *SleepLog) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Day":
		rel, ok := retrieved.(*Day)
		if !ok {
			return fmt.Errorf("sleepLog cannot load %T as %q", retrieved, name)
		}

		o.R.Day = rel

		if rel != nil {
			rel.R.SleepLogs = SleepLogSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("sleepLog has no relationship %q", name)
	}
}

func PreloadSleepLogDay(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Day, DaySlice](orm.Relationship{
		Name: "Day",
		Sides: []orm.RelSide{
			{
				From: TableNames.SleepLogs,
				To:   TableNames.Days,
				FromColumns: []string{
					ColumnNames.SleepLogs.DayID,
				},
				ToColumns: []string{
					ColumnNames.Days.ID,
				},
			},
		},
	}, Days.Columns().Names(), opts...)
}

func ThenLoadSleepLogDay(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadSleepLogDay(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load SleepLogDay", retrieved)
		}

		err := loader.LoadSleepLogDay(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadSleepLogDay loads the sleepLog's Day into the .R struct
func (o *SleepLog) LoadSleepLogDay(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Day = nil

	related, err := o.Day(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.SleepLogs = SleepLogSlice{o}

	o.R.Day = related
	return nil
}

// LoadSleepLogDay loads the sleepLog's Day into the .R struct
func (os SleepLogSlice) LoadSleepLogDay(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	days, err := os.Day(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range days {
			if o.DayID != rel.ID {
				continue
			}

			rel.R.SleepLogs = append(rel.R.SleepLogs, o)

			o.R.Day = rel
			break
		}
	}

	return nil
}

func attachSleepLogDay0(ctx context.Context, exec bob.Executor, count int, sleepLog0 *SleepLog, day1 *Day) (*SleepLog, error) {
	setter := &SleepLogSetter{
		DayID: omit.From(day1.ID),
	}

	err := sleepLog0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachSleepLogDay0: %w", err)
	}

	return sleepLog0, nil
}

func (sleepLog0 *SleepLog) InsertDay(ctx context.Context, exec bob.Executor, related *DaySetter) error {
	day1, err := Days.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachSleepLogDay0(ctx, exec, 1, sleepLog0, day1)
	if err != nil {
		return err
	}

	sleepLog0.R.Day = day1

	day1.R.SleepLogs = append(day1.R.SleepLogs, sleepLog0)

	return nil
}

func (sleepLog0 *SleepLog) AttachDay(ctx context.Context, exec bob.Executor, day1 *Day) error {
	var err error

	_, err = attachSleepLogDay0(ctx, exec, 1, sleepLog0, day1)
	if err != nil {
		return err
	}

	sleepLog0.R.Day = day1

	day1.R.SleepLogs = append(day1.R.SleepLogs, sleepLog0)

	return nil
}
